trigger:
 branches:
   include:
     - main
 paths:
   exclude:
     - kubernetes/deployment.yaml   # ignore this file to prevent loops
pr:
 branches:
   include:
     - main
pool:
 vmImage: ubuntu-latest
stages:
# -------------------
# Stage 1: Unit Testing
# -------------------
- stage: Test
  displayName: Unit Testing
  jobs:
   - job: test
     steps:
       - task: NodeTool@0
         inputs:
           versionSpec: '20'
         displayName: Setup Node.js
       - script: |
           npm ci
           npm test || echo "No tests found, would add tests in a real project"
         displayName: Run tests
# -------------------
# Stage 2: Lint
# -------------------
- stage: Lint
  displayName: Static Code Analysis
  dependsOn: []
  jobs:
   - job: lint
     steps:
       - task: NodeTool@0
         inputs:
           versionSpec: '20'
         displayName: Setup Node.js
       - script: |
           npm ci
           npm run lint
         displayName: Run ESLint
# -------------------
# Stage 3: Build
# -------------------
- stage: Build
  displayName: Build
  dependsOn:
   - Test
   - Lint
  jobs:
   - job: build
     steps:
       - task: NodeTool@0
         inputs:
           versionSpec: '20'
         displayName: Setup Node.js
       - script: |
           npm ci
           npm run build
         displayName: Build project
       - task: PublishBuildArtifacts@1
         inputs:
           PathtoPublish: 'dist'
           ArtifactName: 'build-artifacts'
           publishLocation: 'Container'
         displayName: Upload build artifacts
# -------------------
# Stage 4: Docker Build and Push
# -------------------
# - stage: Docker
#   displayName: Docker Build and Push
#   dependsOn: Build
#   variables:
#    REGISTRY: 'ghcr.io'
#    IMAGE_NAME: '$(Build.Repository.Name)'
#   jobs:
#    - job: docker
#      steps:
#        - task: DownloadBuildArtifacts@0
#          inputs:
#            buildType: current
#            downloadType: single
#            artifactName: build-artifacts
#            downloadPath: dist
#          displayName: Download build artifacts
#        - script: |
#            echo "Logging in to GHCR"
#            echo $(TOKEN) | docker login $(REGISTRY) -u $(Build.RequestedFor) --password-stdin
#            echo "Building Docker image..."
#            IMAGE_TAG=sha-$(Build.SourceVersion)
#            docker build -t $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG) .
#            echo "Running Trivy vulnerability scanner..."
#            trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
#            echo "Pushing Docker image..."
#            docker push $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
#            echo "##vso[task.setvariable variable=image_tag]$IMAGE_TAG"
#          displayName: Docker build, scan, push
# # -------------------
# # Stage 5: Update Kubernetes
# # -------------------
# - stage: UpdateK8s
#   displayName: Update Kubernetes Deployment
#   dependsOn: Docker
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
#   jobs:
#    - job: update_k8s
#      steps:
#        - script: |
#            echo "Setting up git config..."
#            git config user.name "Azure DevOps"
#            git config user.email "ado@pipeline.com"
#            echo "Updating deployment.yaml..."
#            NEW_IMAGE="$(REGISTRY)/$(IMAGE_NAME):$(image_tag)"
#            sed -i "s|image: $(REGISTRY)/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
#            echo "Committing changes..."
#            git add kubernetes/deployment.yaml
#            git commit -m "Update Kubernetes deployment with new image tag: $(image_tag) [skip ci]" || echo "No changes to commit"
#            git push
#          displayName: Update Kubernetes manifest